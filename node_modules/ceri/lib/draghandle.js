var clone, dEl, end, getDelta, getEvent, isString, move, ref, start;

ref = require("./_helpers"), isString = ref.isString, clone = ref.clone;

getEvent = function(el, event, throttle, stop, cb) {
  return {
    el: el,
    event: event,
    stop: stop,
    prevent: !stop,
    notPrevented: true,
    cbs: [cb],
    throttle: throttle
  };
};

dEl = document.documentElement;

start = function(o, name, name2, e) {
  var isTouch, ref1;
  if (e.changedTouches != null) {
    e = e.changedTouches[0];
    isTouch = true;
  }
  o.start = {
    x: e.clientX,
    y: e.clientY
  };
  o.firstMove = true;
  if ((ref1 = o.onStart) != null) {
    ref1.call(this, o);
  }
  o._moveRemover = this.$on(getEvent(dEl, name + "move", true, isTouch, move.bind(this, o)));
  return this.$once(getEvent(dEl, name + name2, false, isTouch, end.bind(this, o)));
};

getDelta = function(s, e) {
  return {
    x: e.clientX - s.x,
    y: e.clientY - s.y,
    start: s
  };
};

move = function(o, e) {
  var ref1, ref2;
  if (e.changedTouches != null) {
    e = e.changedTouches[0];
  }
  o.secondMove = o.firstMove;
  if (o.firstMove) {
    if ((ref1 = o.onFirstMove) != null) {
      ref1.call(this, o, e);
    }
  }
  if ((ref2 = o.onMove) != null) {
    ref2.call(this, getDelta(o.start, e), o, e);
  }
  return o.firstMove = false;
};

end = function(o, e) {
  var ref1, ref2, ref3;
  if (typeof o._moveRemover === "function") {
    o._moveRemover();
  }
  o._moveRemover = null;
  if (o.firstMove) {
    return (ref1 = o.onClick) != null ? ref1.call(this, o) : void 0;
  } else {
    if ((ref2 = o.onEnd) != null) {
      ref2.call(this, getDelta(o.start, e), o);
    }
    if (o.secondMove) {
      return (ref3 = o.onClick) != null ? ref3.call(this, o) : void 0;
    }
  }
};

module.exports = {
  _name: "draghandle",
  _v: 1,
  mixins: [require("./events"), require("./parseElement"), require("./style")],
  methods: {
    $draghandle: function(o) {
      if (o.handle == null) {
        o.handle = document.createElement("div");
      }
      o.activate = function() {
        var _el;
        _el = this.$parseElement.byString(o.el);
        if (!o.wasActivated) {
          if (o.initStyle != null) {
            this.$style.set(o.handle, o.initStyle);
          }
          if (o.style != null) {
            this.$computed.orWatch(o.style, this.$style.set.bind(this, o.handle));
          }
          this.$on(getEvent(o.handle, "touchstart", false, true, start.bind(this, o, "touch", "end")));
          this.$on(getEvent(o.handle, "mousedown", false, false, start.bind(this, o, "mouse", "up")));
          this.$path.resolveMultiple(o, ["onStart", "onFirstMove", "onMove", "onEnd", "onClick"]);
        }
        _el.appendChild(o.handle);
        return function() {
          return _el.removeChild(o.handle);
        };
      };
      return this.$parseActive(o);
    }
  },
  connectedCallback: function() {
    var k, ref1, results, v;
    if (this._isFirstConnect && this.draghandle) {
      ref1 = this.draghandle;
      results = [];
      for (k in ref1) {
        v = ref1[k];
        v = clone(v);
        if (v.el == null) {
          v.el = k;
        }
        results.push(this.$draghandle(v));
      }
      return results;
    }
  }
};

;
