module.exports = {
  _name: "open",
  _v: 1,
  mixins: [require("./computed"), require("./events"), require("./@popstate")],
  events: {
    popstate: {
      active: function() {
        return this.onBody && this.openingOrOpen;
      },
      cbs: function() {
        return this.hide(false);
      }
    },
    click: {
      el: document.documentElement,
      outside: true,
      cbs: "hide",
      active: function() {
        return this.openingOrOpen && !this.keepOpen;
      },
      delay: true,
      destroy: true
    },
    keyup: {
      el: document.documentElement,
      notPrevented: true,
      destroy: true,
      keyCode: [27],
      active: function() {
        return this.openingOrOpen && !this.keepOpen;
      },
      cbs: "hide"
    }
  },
  props: {
    open: {
      type: Boolean
    },
    keepOpen: {
      type: Boolean
    }
  },
  data: function() {
    return {
      isOpen: null,
      opening: false,
      closing: false,
      openingOrOpen: false,
      toggleAnimate: true
    };
  },
  methods: {
    _attach: function() {
      if (!this.parentElement) {
        if (this.onBody) {
          if (this.parentElement !== document.body) {
            return document.body.appendChild(this);
          }
        } else if (this.parentElement !== this.__parentElement) {
          return this.__parentElement.replaceChild(this, this.__placeholder);
        }
      }
    },
    _detach: function() {
      if (this.parentElement) {
        if (this.onBody) {
          if (this.parentElement === document.body) {
            return this.remove();
          }
        } else if (this.parentElement === this.__parentElement) {
          return this.__parentElement.replaceChild(this.__placeholder, this);
        }
      }
    },
    _setOpen: function() {
      this.closing = false;
      this.opening = false;
      this.isOpen = true;
      this.open = true;
      this.openingOrOpen = true;
      this.$emit({
        name: "toggle",
        detail: true
      });
      return typeof this.onOpen === "function" ? this.onOpen() : void 0;
    },
    _setClose: function() {
      this.closing = false;
      this.opening = false;
      this.isOpen = false;
      this.open = false;
      this.openingOrOpen = false;
      this.$emit({
        name: "toggle",
        detail: false
      });
      return typeof this.onClose === "function" ? this.onClose() : void 0;
    },
    show: function(animate) {
      if (this.openingOrOpen) {
        return;
      }
      this._attach();
      this.toggleAnimate = animate = animate !== false;
      this.opening = true;
      this.openingOrOpen = true;
      this.closing = false;
      if (typeof this.onShow === "function") {
        this.onShow(animate);
      }
      if (this.$animate && (this.enter != null)) {
        return this.animation = this.enter(this.$cancelAnimation(this.animation, {
          animate: animate,
          done: this._setOpen
        }));
      } else {
        return this.setOpen(this);
      }
    },
    hide: function(animate) {
      var done;
      if (this.closing || !this.openingOrOpen) {
        return;
      }
      this.toggleAnimate = animate = animate !== false;
      this.closing = true;
      this.openingOrOpen = false;
      if (typeof this.onHide === "function") {
        this.onHide(animate);
      }
      done = function() {
        this._setClose();
        return this._detach();
      };
      if (this.$animate && (this.leave != null)) {
        return this.animation = this.leave(this.$cancelAnimation(this.animation, {
          animate: animate,
          done: done
        }));
      } else {
        return done.call(this);
      }
    },
    toggle: function(animate) {
      if ((this.beforeToggle != null) && !this.beforeToggle(animate)) {
        return;
      }
      if (this.isOpen) {
        return this.hide(animate);
      } else {
        return this.show(animate);
      }
    }
  },
  watch: {
    open: function(val) {
      if (this.isOpen == null) {
        if (val) {
          return this.toggle(false);
        } else {
          return this.isOpen = val;
        }
      } else {
        if (val !== this.isOpen) {
          return this.toggle();
        }
      }
    }
  },
  connectedCallback: function() {
    if (this._isFirstConnect) {
      this.__parentElement = this.parentElement;
      this.__placeholder = document.createComment("#open");
      return this.__parentElement.replaceChild(this.__placeholder, this);
    }
  },
  disconnectedCallback: function() {
    if (this.isOpen) {
      return this.toggle(false);
    }
  }
};

;
