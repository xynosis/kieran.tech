var assign, clone, getID, id, isArray, isFunction, isObject, isString, noop, ref;

ref = require("./_helpers"), noop = ref.noop, isString = ref.isString, isArray = ref.isArray, isObject = ref.isObject, isFunction = ref.isFunction, clone = ref.clone, getID = ref.getID, assign = ref.assign;

window.__ceriDeps = null;

id = 0;

module.exports = {
  _name: "computed",
  _prio: 900,
  _v: 1,
  _mergers: require("./_merger").copy({
    source: "computed"
  }),
  _rebind: "$computed",
  mixins: [require("./watch")],
  methods: {
    $computed: {
      init: function(o) {
        var deferred;
        if ((o.parentPath != null) && (o.name != null)) {
          o.path = o.parentPath + "." + o.name;
        }
        if (!o.path) {
          o.id = getID();
          o.path = "__computed." + o.id;
          o.parent = this.__computed;
          o.name = o.id;
        } else {
          this.$path.toNameAndParent(o);
        }
        this.$watch.parse(o);
        o = this.$watch.init(o);
        if (!o.__init__) {
          o.__init__ = true;
          o.isComputed = true;
          o.deps = function(obj) {
            o.deps[obj.id] = true;
            o.ascs.push(obj);
            return o;
          };
          o.ascs = [];
          o.nullTaints = function() {
            var i, len, obj, ref1;
            ref1 = o.ascs;
            for (i = 0, len = ref1.length; i < len; i++) {
              obj = ref1[i];
              if (o !== obj && obj._taints) {
                obj.nullTaints();
              }
            }
            return o._taints = null;
          };
          o.getTaints = function(hash) {
            var i, len, t, taints, tmp;
            if ((taints = o._taints) == null) {
              taints = o._taints = o.cDeps.reduce((function(h, c) {
                if (!c._gettingTaints) {
                  c._gettingTaints = true;
                  h = c.getTaints(h);
                  c._gettingTaints = false;
                  return h;
                } else {
                  if (!h[c.id]) {
                    h[c.id] = true;
                    h._taints.push(c.taint);
                  }
                  return h;
                }
              }), {
                _taints: [o.taint]
              })._taints;
            }
            if (hash != null) {
              tmp = hash._taints;
              for (i = 0, len = taints.length; i < len; i++) {
                t = taints[i];
                if (!hash[t.id]) {
                  hash[t.id] = true;
                  tmp.push(t);
                }
              }
              return hash;
            } else {
              return taints;
            }
          };
          o.instance = this;
          o.taint = function() {
            o.dirty = true;
            return function() {
              var cb, i, instance, len, newVal, oldVal, ref1, results;
              if (o.cbs.length > 0 || o.lazy === false) {
                instance = o.instance;
                oldVal = o.value;
                newVal = o.parent[o.name];
                ref1 = o.cbs;
                results = [];
                for (i = 0, len = ref1.length; i < len; i++) {
                  cb = ref1[i];
                  results.push(cb.call(instance, newVal, oldVal, o));
                }
                return results;
              }
            };
          };
          o.taint.id = o.id;
          o.notify = function() {
            var cb, i, len, ref1, results;
            ref1 = o.getTaints().map((function(_this) {
              return function(taint) {
                return taint();
              };
            })(this));
            results = [];
            for (i = 0, len = ref1.length; i < len; i++) {
              cb = ref1[i];
              results.push(cb());
            }
            return results;
          };
          o.notify.owner = o;
          if (o.set != null) {
            o.setter = o.set.bind(this);
          } else {
            o.setter = noop;
          }
          o.get = o.get.bind(this);
          o.oldVal = null;
          o.getter = function() {
            var c, i, inst, len, ref1, tmp, tmp2;
            if (o.dirty) {
              inst = o.instance;
              o.dirty = false;
              tmp = window.__ceriDeps;
              tmp2 = window.__ceriActiveInstance;
              window.__ceriDeps = o.deps;
              window.__ceriActiveInstance = o.master ? null : inst;
              o.oldVal = o.value;
              o.value = o.get();
              window.__ceriDeps = tmp;
              window.__ceriActiveInstance = tmp2;
              if (!isObject(o.value) && !isArray(o.value) && o.oldVal !== o.value) {
                ref1 = o.cDeps;
                for (i = 0, len = ref1.length; i < len; i++) {
                  c = ref1[i];
                  if (!c.dirty && (o.deps[c.id] != null)) {
                    c.notify();
                  }
                }
              }
              inst.$watch.processNewValue(o);
            }
            o.checkComputed();
            return o.value;
          };
          deferred = function() {
            var k, ref1, results, v;
            Object.defineProperty(o.parent, o.name, {
              get: o.getter,
              set: o.setter
            });
            if (o.cbs.length > 0 || o.lazy === false) {
              return this.$nextTick(o.notify);
            } else {
              o.dirty = true;
              ref1 = this.$watch.__w;
              results = [];
              for (k in ref1) {
                v = ref1[k];
                if (~k.indexOf(o.path) && k !== o.path) {
                  o.cbs.push(noop);
                  this.$nextTick(o.notify);
                  break;
                } else {
                  results.push(void 0);
                }
              }
              return results;
            }
          };
          if (this.$computed.__deferredInits && !o.noWait) {
            this.$computed.__deferredInits.push(deferred);
          } else {
            deferred.call(this);
          }
        }
        return o;
      },
      getNotifyCb: function(o) {
        if(process.env.NODE_ENV!=='production' && o.path == null){console.warn('getNotifyCb requires a path')};
        if (((o = this.$watch.getObj(o)) != null) && (o.notify != null)) {
          return o.notify;
        }
        if(process.env.NODE_ENV!=='production' && true){console.warn('couldn\'t get notify cb for computed ' + o.path)};
        return noop;
      },
      orWatch: function(val, cbs) {
        if (isString(val)) {
          return this.$watch.path({
            path: val,
            cbs: cbs
          });
        } else {
          return this.$computed.init({
            get: val,
            cbs: cbs
          });
        }
      },
      parseAndInit: function(obj, options) {
        if (isObject(obj)) {
          obj = clone(obj);
        } else {
          obj = {
            get: obj
          };
        }
        return this.$computed.init(assign(obj, options));
      },
      setup: function(obj, parent) {
        var k, results, v;
        if (parent == null) {
          parent = this;
        }
        results = [];
        for (k in obj) {
          v = obj[k];
          results.push(this.$computed.parseAndInit(v, {
            parent: parent,
            name: k,
            path: k
          }));
        }
        return results;
      }
    }
  },
  created: function() {
    this.$computed.__deferredInits = [];
    this.__computed = {};
    return this.$computed.setup(this.computed);
  },
  connectedCallback: function() {
    return this.$nextTick(function() {
      var arr, deferred, i, len, results;
      arr = this.$computed.__deferredInits;
      this.$computed.__deferredInits = false;
      results = [];
      for (i = 0, len = arr.length; i < len; i++) {
        deferred = arr[i];
        results.push(deferred.call(this));
      }
      return results;
    });
  }
};

;
