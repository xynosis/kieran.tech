var isArray, isFunction, isString, ref;

ref = require("./_helpers"), isFunction = ref.isFunction, isString = ref.isString, isArray = ref.isArray;

module.exports = {
  _name: "mount",
  _v: 1,
  mixins: [require("./parseFunction")],
  methods: {
    $mount: function(arg) {
      var anchor, els, template;
      anchor = arg.anchor, els = arg.els, template = arg.template;
      if (isFunction(els)) {
        template = els;
      }
      if(process.env.NODE_ENV!=='production' && !template){throw new Error('$mount called without template')};
      els = null;
      return this.$parseFunction(template, function(fn) {
        var el, i, j, len, len1, parent, results;
        if (isArray(els)) {
          for (i = 0, len = els.length; i < len; i++) {
            el = els[i];
            el.remove();
          }
        }
        if (fn && isFunction(fn)) {
          els = fn.call(this);
          if (isArray(els)) {
            parent = anchor.parentElement;
            results = [];
            for (j = 0, len1 = els.length; j < len1; j++) {
              el = els[j];
              results.push(parent.insertBefore(el, anchor));
            }
            return results;
          }
        }
      });
    }
  }
};

;
