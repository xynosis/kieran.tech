var isArray, isFunction, isString, ref, splittedToObjects;

ref = require("./_helpers"), isString = ref.isString, isArray = ref.isArray, isFunction = ref.isFunction;

splittedToObjects = function(splitted, obj) {
  return splitted.reduce((function(arr, name, i) {
    arr.push(arr[i][name]);
    return arr;
  }), [obj]);
};

module.exports = {
  _name: "path",
  _v: 1,
  _rebind: "$path",
  methods: {
    $path: {
      toValue: function(o) {
        if (o.value == null) {
          if (o.parent && o.name) {
            o.value = o.parent[o.name];
          } else {
            if (o.obj == null) {
              o.obj = this;
            }
            o.value = splittedToObjects(o.path.split("."), o.obj).pop();
          }
        }
        return o;
      },
      getValue: function(path) {
        return this.$path.toValue({
          path: path
        }).value;
      },
      resolveValue: function(val) {
        var tmp;
        if (isString(val)) {
          val = this.$path.getValue((tmp = val));
          if ((val == null) && (tmp === "this" || tmp === "@")) {
            val = this;
          }
        }
        return val;
      },
      resolveMultiple: function(o, arr) {
        var j, len, results, str;
        results = [];
        for (j = 0, len = arr.length; j < len; j++) {
          str = arr[j];
          if (o[str]) {
            results.push(o[str] = this.$path.resolveValue(o[str]));
          } else {
            results.push(void 0);
          }
        }
        return results;
      },
      setValue: function(o) {
        if (o.value != null) {
          this.$path.toNameAndParent(o);
          return o.parent[o.name] = o.value;
        }
      },
      toNameAndParent: function(o) {
        var splitted;
        if (o.name && o.parent) {
          return o;
        }
        splitted = o.path.split(".");
        if (o.obj == null) {
          o.obj = this;
        }
        o.name = splitted.pop();
        o.parent = splittedToObjects(splitted, o.obj).pop();
        return o;
      }
    }
  }
};

;
