var arrayize, isObject, ref;

ref = require("./_helpers"), arrayize = ref.arrayize, isObject = ref.isObject;

module.exports = {
  apply: function(obj, mixins, mergers) {
    var finisher, i, j, k, l, len, len1, len2, mergeFinisher, mergeInstructions, merger, mixin, sortedMixins, v;
    mergers = arrayize(mergers);
    mergeInstructions = {};
    mergeFinisher = [];
    for (i = 0, len = mergers.length; i < len; i++) {
      merger = mergers[i];
      mergeInstructions[merger.source] = merger.setup(obj.prototype);
      if (merger.finisher != null) {
        mergeFinisher.push(merger.finisher);
      }
    }
    sortedMixins = mixins.sort(function(a, b) {
      return (b._prio || 0) - (a._prio || 0);
    });
    for (j = 0, len1 = sortedMixins.length; j < len1; j++) {
      mixin = sortedMixins[j];
      for (k in mergeInstructions) {
        v = mergeInstructions[k];
        if (mixin[k] != null) {
          v.iterate(mixin[k]);
        }
      }
    }
    for (k in mergeInstructions) {
      v = mergeInstructions[k];
      if (typeof v.end === "function") {
        v.end();
      }
    }
    for (l = 0, len2 = mergeFinisher.length; l < len2; l++) {
      finisher = mergeFinisher[l];
      finisher(obj);
    }
    return obj;
  },
  copy: function(merger) {
    if (merger.target == null) {
      merger.target = merger.source;
    }
    merger.setup = function(obj) {
      var k, o, ref1, target, v;
      if (merger.target) {
        if ((target = obj[merger.target]) == null) {
          if (merger.source === merger.target || !isObject(o = obj[merger.source])) {
            o = {};
          }
          target = obj[merger.target] = o;
        }
      } else {
        target = obj;
        if (obj[merger.source] != null) {
          ref1 = obj[merger.source];
          for (k in ref1) {
            v = ref1[k];
            if (obj[k] == null) {
              obj[k] = v;
            }
          }
        }
      }
      return {
        iterate: function(entry) {
          var results;
          results = [];
          for (k in entry) {
            v = entry[k];
            results.push(target[k] != null ? target[k] : target[k] = v);
          }
          return results;
        }
      };
    };
    return merger;
  },
  concat: function(merger) {
    if (merger.target == null) {
      merger.target = merger.source;
    }
    merger.setup = function(obj) {
      var tmp;
      tmp = [];
      return {
        iterate: function(entry) {
          return tmp = tmp.concat(arrayize(entry));
        },
        end: function() {
          if (merger.last) {
            return obj[merger.target] = tmp.concat(arrayize(obj[merger.source]));
          } else {
            return obj[merger.target] = arrayize(obj[merger.source]).concat(tmp);
          }
        }
      };
    };
    return merger;
  }
};

;
