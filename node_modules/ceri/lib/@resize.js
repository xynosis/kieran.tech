var activate, allResizeCbs, callAllResizeCbs, observer;

if (window.MutationObserver != null) {
  allResizeCbs = [];
  activate = function(el, cb) {
    var cbwrapper, elheight, elwidth;
    elheight = el.offsetHeight;
    elwidth = el.offsetWidth;
    cbwrapper = function() {
      if (elheight !== el.offsetHeight || elwidth !== el.offsetWidth) {
        elheight = el.offsetHeight;
        elwidth = el.offsetWidth;
        return cb.apply(null, arguments);
      }
    };
    allResizeCbs.push(cbwrapper);
    return function() {
      var i;
      if (~(i = allResizeCbs.indexOf(cbwrapper))) {
        return allResizeCbs.splice(i, 1);
      }
    };
  };
  callAllResizeCbs = function() {
    var cb, j, len, results;
    results = [];
    for (j = 0, len = allResizeCbs.length; j < len; j++) {
      cb = allResizeCbs[j];
      results.push(cb.apply(null, arguments));
    }
    return results;
  };
  observer = new MutationObserver(callAllResizeCbs);
  observer.observe(document.body, {
    attributes: true,
    childList: true,
    characterData: true,
    subtree: true
  });
  window.addEventListener("resize", callAllResizeCbs);
} else {
  require("javascript-detect-element-resize");
  activate = function(el, cb) {
    window.addResizeListener(el, cb);
    return window.removeResizeListener.bind(null, el, cb);
  };
}

module.exports = {
  _name: "@resize",
  _v: 1,
  mixins: [require("./events")],
  _evLookup: {
    resize: function(o) {
      if (o.throttled == null) {
        o.throttled = true;
      }
      o.activate = (function(_this) {
        return function() {
          var cb, el;
          el = _this.$parseElement.byString(o.el);
          cb = o.cb.bind(_this, el);
          return activate(el, cb);
        };
      })(this);
      return o;
    }
  }
};
