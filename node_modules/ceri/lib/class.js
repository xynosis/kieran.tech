var isFunction, isString, ref;

ref = require("./_helpers"), isString = ref.isString, isFunction = ref.isFunction;

module.exports = {
  _name: "class",
  _v: 1,
  _rebind: "$class",
  _mergers: [
    require("./_merger").copy({
      source: "initClass"
    }), require("./_merger").copy({
      source: "computedClass"
    })
  ],
  _attrLookup: {
    "class": {
      "#": function(o) {
        return this.$computed.orWatch(o.value, function(val) {
          return this.$class.set(o.el, val);
        });
      }
    }
  },
  mixins: [require("./parseElement")],
  methods: {
    $class: {
      strToObj: function(str) {
        var cls, i, len, ref1, result;
        result = {};
        if (str != null) {
          ref1 = str.split(" ");
          for (i = 0, len = ref1.length; i < len; i++) {
            cls = ref1[i];
            result[cls] = true;
          }
        }
        return result;
      },
      objToStr: function(obj) {
        var k, result, v;
        result = [];
        for (k in obj) {
          v = obj[k];
          if (v) {
            result.push(k);
          }
        }
        return result.join(" ");
      },
      setStr: function(el, str) {
        return this.$parseElement.byString(el).className = str;
      },
      set: function(el, obj) {
        if (obj == null) {
          obj = el;
          el = this;
        }
        return this.$class.setStr(el, this.$class.objToStr(obj));
      }
    }
  },
  connectedCallback: function() {
    var c, cc, el, inc, k, results, v;
    if (this._isFirstConnect) {
      if ((inc = this.initClass) != null) {
        if (isString(inc)) {
          this.$class.setStr(this, inc);
        } else {
          for (k in inc) {
            v = inc[k];
            this.$class.setStr(k, v);
          }
        }
      }
      if ((cc = this.computedClass) != null) {
        results = [];
        for (el in cc) {
          c = cc[el];
          results.push(this.$computed.parseAndInit(c, {
            cbs: (function(el, val) {
              return this.$class.set(el, val);
            }).bind(this, el)
          }));
        }
        return results;
      }
    }
  }
};

;
