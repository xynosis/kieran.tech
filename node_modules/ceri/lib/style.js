var camelize, capitalize, clone, isArray, isFunction, isObject, prefixes, ref;

prefixes = ["Webkit", "Moz", "ms"];

ref = require("./_helpers"), camelize = ref.camelize, capitalize = ref.capitalize, isArray = ref.isArray, isFunction = ref.isFunction, clone = ref.clone, isObject = ref.isObject;

module.exports = {
  _name: "style",
  _v: 1,
  _rebind: "$style",
  _prio: 700,
  _mergers: [
    require("./_merger").concat({
      source: "initStyle"
    }), require("./_merger").concat({
      source: "computedStyle"
    })
  ],
  _attrLookup: {
    style: {
      "#": function(o) {
        return this.$computed.orWatch(o.value, function(val) {
          return this.$style.set(o.el, val);
        });
      }
    }
  },
  mixins: [require("./parseElement")],
  methods: {
    $style: {
      normalize: function(prop, el) {
        var i, len, prefix, prefixed;
        if (el == null) {
          el = this;
        }
        prop = camelize(prop);
        el = this.$parseElement.byString(el);
        if (el.style[prop] != null) {
          return prop;
        }
        prop = capitalize(prop);
        for (i = 0, len = prefixes.length; i < len; i++) {
          prefix = prefixes[i];
          prefixed = prefix + prop;
          if (el.style[prefixed] != null) {
            return prefixed;
          }
        }
        return null;
      },
      normalizeObj: function(obj, el) {
        var k, key, normalize, tmp, v;
        tmp = {};
        normalize = this.$style.normalize;
        for (k in obj) {
          v = obj[k];
          key = normalize(k, el);
          if (key) {
            tmp[key] = v;
          }
        }
        return tmp;
      },
      setNormalized: function(el, obj) {
        var k, results, v;
        el = this.$parseElement.byString(el);
        results = [];
        for (k in obj) {
          v = obj[k];
          if (isArray(v) && (v[0] != null)) {
            results.push(el.style[k] = v.join(""));
          } else {
            results.push(el.style[k] = v);
          }
        }
        return results;
      },
      set: function(el, obj) {
        if (obj == null) {
          obj = el;
          el = this;
        }
        return this.$style.setNormalized(el, this.$style.normalizeObj(obj, el));
      }
    }
  },
  connectedCallback: function() {
    var c, cs, el, i, ins, j, len, len1, ref1, ref2, results, s;
    if (this._isFirstConnect) {
      ref1 = this.initStyle;
      for (i = 0, len = ref1.length; i < len; i++) {
        ins = ref1[i];
        if (!isObject(ins[Object.keys(ins)[0]])) {
          ins = {
            "this": ins
          };
        }
        for (el in ins) {
          s = ins[el];
          this.$style.set(el, s);
        }
      }
      ref2 = this.computedStyle;
      results = [];
      for (j = 0, len1 = ref2.length; j < len1; j++) {
        cs = ref2[j];
        results.push((function() {
          var results1;
          results1 = [];
          for (el in cs) {
            c = cs[el];
            results1.push(this.$computed.parseAndInit(c, {
              cbs: (function(el, val) {
                return this.$style.set(el, val);
              }).bind(this, el)
            }));
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  }
};

;
