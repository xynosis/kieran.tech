var isFunction;

isFunction = require("./_helpers").isFunction;

module.exports = {
  _name: "if",
  _v: 1,
  mixins: ["parseFunction"],
  methods: {
    $if: function(o) {
      var append, els, els2, elseTemplate, remove, template;
      if(process.env.NODE_ENV!=='production' && !o.value){throw new Error('no value provided for $if')};
      template = isFunction(o.els) ? o.els : o.template;
      elseTemplate = o.elseTemplate;
      els = template ? null : o.els;
      append = function(els) {
        var el, i, len, parent, results;
        if (els != null) {
          parent = o.parent || o.anchor.parentElement;
          results = [];
          for (i = 0, len = els.length; i < len; i++) {
            el = els[i];
            if (el.parentElement !== parent) {
              results.push(parent.insertBefore(el, o.anchor));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
      remove = function(els) {
        var el, i, len, results;
        if (els != null) {
          results = [];
          for (i = 0, len = els.length; i < len; i++) {
            el = els[i];
            results.push(el.remove());
          }
          return results;
        }
      };
      els2 = elseTemplate ? null : o["else"];
      return this.$computed.orWatch(o.value, function(value, oldVal) {
        var truthy;
        truthy = !value !== !o.not;
        if (truthy) {
          if (template != null) {
            this.$parseFunction(template, function(fn) {
              var oldEls;
              oldEls = els;
              if ((fn != null) && isFunction(fn)) {
                els = fn.call(this);
              } else {
                els = [];
              }
              if (truthy === true) {
                append(els);
                return remove(oldEls);
              }
            });
            template = null;
          } else {
            if (els) {
              append(els);
            }
          }
          if (els2) {
            return remove(els2);
          }
        } else {
          if (elseTemplate != null) {
            this.$parseFunction(elseTemplate, function(fn) {
              var oldEls;
              oldEls = els2;
              if ((fn != null) && isFunction(fn)) {
                els2 = fn.call(this);
              } else {
                els2 = [];
              }
              if (truthy === false) {
                append(els2);
                return remove(oldEls);
              }
            });
            elseTemplate = null;
          } else {
            if (els2) {
              append(els2);
            }
          }
          if (els) {
            return remove(els);
          }
        }
      });
    }
  }
};

;
