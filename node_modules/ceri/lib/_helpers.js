var concat, id, isArray, isFunction, isObject, isPlainObject,
  slice = [].slice,
  hasProp = {}.hasOwnProperty;

isArray = Array.isArray;

isObject = function(obj) {
  return typeof obj === "object";
};

isFunction = function(obj) {
  return typeof obj === "function";
};

isPlainObject = function(obj) {
  return isObject(obj) && Object.prototype.toString.call(obj) === "[object Object]";
};

concat = function(arr1, arr2) {
  return Array.prototype.push.apply(arr1, arr2);
};

id = 0;

module.exports = {
  getID: function() {
    return id++;
  },
  noop: function() {},
  assign: Object.assign || function() {
    var i, k, len, source, sources, target, v;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    target = Object(target);
    if (sources != null) {
      for (i = 0, len = sources.length; i < len; i++) {
        source = sources[i];
        for (k in source) {
          if (!hasProp.call(source, k)) continue;
          v = source[k];
          target[k] = v;
        }
      }
    }
    return target;
  },
  merge: function() {
    var i, k, len, results, source, sources, target, v;
    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    target = Object(target);
    if (sources != null) {
      results = [];
      for (i = 0, len = sources.length; i < len; i++) {
        source = sources[i];
        results.push((function() {
          var results1;
          results1 = [];
          for (k in source) {
            if (!hasProp.call(source, k)) continue;
            v = source[k];
            results1.push(target[k] != null ? target[k] : target[k] = v);
          }
          return results1;
        })());
      }
      return results;
    }
  },
  concat: concat,
  identity: function(val) {
    return val;
  },
  arrayize: function(obj) {
    if (isArray(obj)) {
      return obj;
    } else if (obj == null) {
      return [];
    } else {
      return [obj];
    }
  },
  isString: function(obj) {
    return typeof obj === "string" || obj instanceof String;
  },
  isArray: isArray,
  isObject: isObject,
  isPlainObject: isPlainObject,
  isFunction: isFunction,
  isElement: function(obj) {
    if (typeof HTMLElement === "object") {
      return obj instanceof HTMLElement;
    } else {
      return (obj != null) && (obj.nodeType != null) === 1 && typeof (obj.nodeName != null) === "string";
    }
  },
  camelize: function(str) {
    return str.replace(/-(\w)/g, function(_, c) {
      if (c) {
        return c.toUpperCase();
      } else {
        return '';
      }
    });
  },
  capitalize: function(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  },
  hyphenate: function(str) {
    return str.replace(/([^-])([A-Z])/g, '$1-$2').toLowerCase();
  },
  clone: function(o) {
    var cln, k, v;
    if (isPlainObject(o)) {
      cln = {};
      for (k in o) {
        if (!hasProp.call(o, k)) continue;
        v = o[k];
        cln[k] = v;
      }
      return cln;
    } else if (isArray(o)) {
      return o.slice();
    } else {
      return o;
    }
  },
  rebind: function(o) {
    var i, k, k2, key, len, o1, o2, proto, ref, results, v, v2;
    proto = Object.getPrototypeOf(o);
    while (!proto.hasOwnProperty("_isCeriProto")) {
      proto = Object.getPrototypeOf(proto);
    }
    ref = o._rebind;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      key = ref[i];
      if (!o.hasOwnProperty(key)) {
        o1 = proto[key];
        if(process.env.NODE_ENV!=='production' && !isObject(o1)){throw new Error('_rebind must target object: ' + key)};
        o2 = {};
        Object.defineProperty(o, key, {
          __proto__: null,
          value: o2
        });
        results.push((function() {
          var results1;
          results1 = [];
          for (k in o1) {
            v = o1[k];
            if (isFunction(v)) {
              results1.push(o2[k] = v.bind(o));
            } else if (isArray(v)) {
              results1.push(o2[k] = v.slice());
            } else if (isObject(v) && (v != null)) {
              o2[k] = {};
              results1.push((function() {
                var results2;
                results2 = [];
                for (k2 in v) {
                  v2 = v[k2];
                  results2.push(o2[k2] = v2);
                }
                return results2;
              })());
            } else {
              results1.push(o2[k] = v);
            }
          }
          return results1;
        })());
      } else {
        results.push(void 0);
      }
    }
    return results;
  }
};

;
