var arrayize, camelize, clone, hyphenate, ref;

ref = require("./_helpers"), arrayize = ref.arrayize, hyphenate = ref.hyphenate, camelize = ref.camelize, clone = ref.clone;

module.exports = {
  _name: "props",
  _v: 1,
  _prio: 900,
  _mergers: require("./_merger").copy({
    source: "props",
    finisher: function(obj) {
      var arr, hyphenated, k, ref1, v;
      arr = arrayize(obj.prototype.observedAttributes);
      ref1 = obj.prototype.props;
      for (k in ref1) {
        v = ref1[k];
        hyphenated = hyphenate(k);
        if (!~arr.indexOf(hyphenated)) {
          arr.push(hyphenated);
        }
      }
      return Object.defineProperty(obj, "observedAttributes", {
        value: arr
      });
    }
  }),
  mixins: [require("./watch"), require("./setAttribute")],
  attributeChangedCallback: function(name, oldVal, newVal) {
    var camelized, prop, val;
    camelized = camelize(name);
    if ((prop = this.props[camelized]) == null) {
      return;
    }
    if (prop.type === Number && (newVal != null)) {
      val = Number(newVal);
    } else if (prop.type === Boolean) {
      val = newVal != null;
    } else {
      val = newVal;
    }
    if (prop.name != null) {
      camelized = prop.name;
    }
    if (this[camelized] !== val) {
      return this[camelized] = val;
    }
  },
  created: function() {
    var k, o, ref1, results, v;
    if (this.props == null) {
      this.props = {};
    }
    ref1 = this.props;
    results = [];
    for (k in ref1) {
      v = ref1[k];
      if (v.type == null) {
        v = {
          type: v,
          name: k
        };
        this.props[k] = v;
      } else {
        if (v.name == null) {
          v.name = k;
        }
      }
      if (v.type === Boolean && (v["default"] == null)) {
        v["default"] = false;
      }
      o = clone(v);
      o.parent = this;
      o.value = this[o.name];
      o.cbs = arrayize(o.cbs).concat([this.$setAttribute.bind(this, this, hyphenate(o.name))]);
      if (o.path == null) {
        o.path = o.name;
      }
      if (o.initial == null) {
        o.initial = false;
      }
      results.push(this.$watch.path(o));
    }
    return results;
  },
  connectedCallback: function() {
    if (this._isFirstConnect) {
      return this.$nextTick(function() {
        var k, name, ref1, results, v;
        ref1 = this.props;
        results = [];
        for (k in ref1) {
          v = ref1[k];
          if (v["default"] != null) {
            if (v.name) {
              name = v.name;
            } else {
              name = k;
            }
            results.push(this[name] != null ? this[name] : this[name] = v["default"]);
          } else {
            results.push(void 0);
          }
        }
        return results;
      });
    }
  }
};

;
