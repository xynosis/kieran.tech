var arrayize, cAF, clone, isArray, isFunction, isString, listener, noop, rAF, ref, throttled;

ref = require("./_helpers"), isString = ref.isString, isFunction = ref.isFunction, isArray = ref.isArray, arrayize = ref.arrayize, noop = ref.noop, clone = ref.clone;

rAF = requestAnimationFrame;

cAF = cancelAnimationFrame;

listener = function(o, e) {
  cAF(o.lastRequest);
  return o.lastRequest = rAF(function() {
    var cb, j, len, ref1, results;
    ref1 = o.cbs;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      cb = ref1[j];
      results.push(cb(e));
    }
    return results;
  });
};

throttled = function(el, event, cb) {
  var o, ref1;
  if ((o = (ref1 = el.__ceriEventListener) != null ? ref1[event] : void 0) == null) {
    if (el.__ceriEventListener == null) {
      el.__ceriEventListener = {};
    }
    o = el.__ceriEventListener[event] = {};
    o.lastRequest = null;
    o.cbs = [cb];
    o.listener = listener.bind(null, o);
  } else {
    o.cbs.push(cb);
  }
  if (o.cbs.length === 1) {
    el.addEventListener(event, o.listener);
  }
  return function() {
    var i;
    if (~(i = o.cbs.indexOf(cb))) {
      o.cbs.splice(i, 1);
      if (o.cbs.length === 0) {
        return el.removeEventListener(event, o.listener);
      }
    }
  };
};

module.exports = {
  _name: "events",
  _v: 1,
  _prio: 700,
  _mergers: [
    require("./_merger").concat({
      source: "events"
    }), require("./_merger").copy({
      source: "_evLookup"
    })
  ],
  mixins: [require("./computed"), require("./parseElement"), require("./parseActive"), require("./parseFunction")],
  _evLookup: {},
  methods: {
    $once: function(o) {
      o.once = true;
      return this.$on(o);
    },
    $on: function(o) {
      var cbs, j, len, obj, ref1, str;
      o._cbs = cbs = [];
      if (o.toggle) {
        if (!isString(o.toggle)) {
          o.toggle = o.value;
        }
        obj = this.$path.toNameAndParent({
          path: o.toggle
        });
        cbs.push(function() {
          return obj.parent[obj.name] = !obj.parent[obj.name];
        });
      } else {
        ref1 = arrayize(o.cbs);
        for (j = 0, len = ref1.length; j < len; j++) {
          str = ref1[j];
          this.$parseFunction(str, function(fn, oldFn) {
            var index;
            if (oldFn && ~(index = cbs.indexOf(oldFn))) {
              cbs.splice(index, 1);
            }
            if (fn && isFunction(fn)) {
              return cbs.push(fn);
            }
          });
        }
      }
      o.cb = function(el, e) {
        var delay, ev, isInside, l, len1, len2, m, ocb, ref2, ref3, ref4, target;
        if (o.self && e.target !== el) {
          return;
        }
        if (o.notPrevented && e.defaultPrevented) {
          return;
        }
        if (o.keyCode && !~o.keyCode.indexOf(e.keyCode)) {
          return;
        }
        if (o.outside && (e.target != null)) {
          target = e.target;
          while (target != null) {
            if (target === this) {
              return;
            }
            target = target.parentElement;
          }
        }
        if (o.inside && (e.target != null)) {
          target = e.target;
          isInside = false;
          while (target != null) {
            if (target === el) {
              isInside = true;
              break;
            }
            target = target.parentElement;
          }
          if (!isInside) {
            return;
          }
        }
        if ((ref2 = o.defer) != null ? ref2.delay : void 0) {
          if (o.defer.canceled) {
            clearTimeout(o.defer.timeout);
            o.defer.canceled = false;
          }
          delay = (isString(o.defer.delay) && this.$path.getValue(o.defer.delay)) || o.defer.delay;
          if (delay > 1) {
            if (o.defer.cancel) {
              o.defer.canceler = [];
              ref3 = arrayize(o.defer.cancel);
              for (l = 0, len1 = ref3.length; l < len1; l++) {
                ev = ref3[l];
                o.defer.canceler.push(this.$once({
                  el: o.el,
                  event: ev,
                  cbs: function() {
                    return o.defer.canceled = true;
                  }
                }));
              }
            }
            o.defer.timeout = setTimeout(((function(_this) {
              return function() {
                var deactivate, len2, len3, m, n, ocb, ref4, ref5;
                if (o.defer.canceler) {
                  ref4 = o.defer.canceler;
                  for (m = 0, len2 = ref4.length; m < len2; m++) {
                    deactivate = ref4[m];
                    deactivate();
                  }
                  o.defer.canceler = null;
                }
                if (!o.defer.canceled) {
                  ref5 = o._cbs;
                  for (n = 0, len3 = ref5.length; n < len3; n++) {
                    ocb = ref5[n];
                    ocb.call(_this, e);
                  }
                }
                return o.defer.canceled = false;
              };
            })(this)), delay);
          }
        } else {
          ref4 = o._cbs;
          for (m = 0, len2 = ref4.length; m < len2; m++) {
            ocb = ref4[m];
            ocb.call(this, e);
          }
        }
        if (o.prevent) {
          e.preventDefault();
        }
        if (o.stop) {
          e.stopPropagation();
        }
        if (o.once) {
          return o.deactivate();
        }
      };
      if (this._evLookup[o.event] != null) {
        o = this._evLookup[o.event].call(this, o);
      } else {
        o.activate = function() {
          var _cb, el;
          el = this.$parseElement.byString(o.el);
          _cb = o.cb.bind(this, el);
          if (o.throttled) {
            return o.deactivate = throttled(el, o.event, _cb);
          } else {
            el.addEventListener(o.event, _cb, o.capture);
            return o.deactivate = function() {
              return el.removeEventListener(o.event, _cb);
            };
          }
        };
      }
      return this.$parseActive(o);
    },
    $emit: function(o) {
      var evt;
      if (o.el == null) {
        o.el = this;
      }
      evt = document.createEvent('CustomEvent');
      evt.initCustomEvent(o.name, false, false, o.detail);
      return o.el.dispatchEvent(evt);
    }
  },
  connectedCallback: function() {
    var el, events, j, k, len, o, ref1, results, v, v2;
    if (this._isFirstConnect) {
      ref1 = this.events;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        events = ref1[j];
        results.push((function() {
          var results1;
          results1 = [];
          for (k in events) {
            v = events[k];
            if (v.cbs != null) {
              o = clone(v);
              o.event = k;
              results1.push(this.$on(o));
            } else if (isString(v) || isFunction(v) || isArray(v)) {
              results1.push(this.$on({
                cbs: v,
                event: k
              }));
            } else {
              results1.push((function() {
                var results2;
                results2 = [];
                for (el in v) {
                  v2 = v[el];
                  o = clone(v2);
                  if (o.el == null) {
                    o.el = el;
                  }
                  o.event = k;
                  results2.push(this.$on(o));
                }
                return results2;
              }).call(this));
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  }
};

;
