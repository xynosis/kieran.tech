var ceri;

ceri = require("./ceri");

module.exports = function(parent, obj) {
  var cls, e, k, v;
  if (obj == null) {
    obj = parent;
    parent = HTMLElement;
  }
  try {
    if (window.customElements.define.name !== "define") {
      throw new Error("polyfill detected - fallback to ES5 class");
    }
    cls = class Ceri extends parent {
      constructor () {
        super()
        if (this._crCb) {
          this._crCb.forEach(cb => {
            cb.call(this)
          })
        }
        return this
      }
    };
  } catch (error) {
    e = error;
    cls = obj.constructor = function(self) {
      var fn, i, len, ref;
      self = parent.call(self || this);
      if (self._crCb) {
        ref = self._crCb;
        for (i = 0, len = ref.length; i < len; i++) {
          fn = ref[i];
          fn.call(self);
        }
      }
      return self;
    };
  }
  cls.prototype = Object.create(parent.prototype);
  for (k in obj) {
    v = obj[k];
    cls.prototype[k] = v;
  }
  return ceri(cls);
};
