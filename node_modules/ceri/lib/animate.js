var easing, isArray, processPreserve, processStyle, step;

isArray = require("./_helpers").isArray;

easing = {
  linear: function() {
    return function(percent) {
      return percent;
    };
  },
  pow: function(param) {
    if (param == null) {
      param = 2;
    }
    return function(percent) {
      return Math.pow(percent, param);
    };
  },
  sin: function() {
    return function(percent) {
      return Math.sin((percent + 3) * Math.PI / 2) + 1;
    };
  },
  exp: function() {
    return function(percent) {
      return Math.exp(percent);
    };
  },
  circ: function() {
    return function(percent) {
      return 1 - Math.sqrt(1 - Math.pow(percent, 2));
    };
  },
  back: function(s) {
    if (s == null) {
      s = 1.70158;
    }
    return function(percent) {
      return Math.pow(percent, 2) * ((s + 1) * percent - s);
    };
  }
};

processStyle = function(style, aniStyle, fac, preserve) {
  var key, tmp, transform, val;
  transform = [];
  for (key in aniStyle) {
    val = aniStyle[key];
    if ((preserve != null) && ~preserve.indexOf(key)) {
      continue;
    }
    tmp = val[0] + fac * (val[1] - val[0]);
    if (val[2]) {
      tmp += val[2];
    }
    if (style[key] != null) {
      style[key] = tmp;
    } else {
      transform.push(key + "(" + tmp + ")");
    }
  }
  if (transform.length > 0) {
    return style.transform = transform.join(" ");
  }
};

processPreserve = function(style, preserve) {
  var key, results, val;
  if (preserve) {
    results = [];
    for (key in preserve) {
      val = preserve[key];
      results.push(style[key] = val);
    }
    return results;
  }
};

step = function(o) {
  return function(timestamp) {
    var fac, j, key, len, percent, ref, ref1, s, tmp, val;
    if (!o.stopped) {
      s = o.el.style;
      if (o.start == null) {
        o.el.__ceriAnimation = o;
        if (o._percent) {
          o.start = timestamp - o._percent * o.duration;
        } else {
          o.start = timestamp;
          if (o.preserve) {
            tmp = {};
            ref = o.preserve;
            for (j = 0, len = ref.length; j < len; j++) {
              key = ref[j];
              tmp[key] = s[key];
            }
            o.preserve = tmp;
          }
          if (o.init) {
            ref1 = o.init;
            for (key in ref1) {
              val = ref1[key];
              s[key] = val;
            }
          }
        }
      }
      percent = (timestamp - o.start) / o.duration;
      if (percent > 1) {
        fac = 1;
      } else if (percent > 0) {
        fac = o.easing(percent);
      } else {
        fac = 0;
      }
      processStyle(s, o.style, fac);
      if (fac !== 1) {
        return requestAnimationFrame(o.next);
      } else {
        if (typeof o.stop === "function") {
          o.stop({
            reset: true
          });
        }
        return typeof o.done === "function" ? o.done(o) : void 0;
      }
    }
  };
};

module.exports = {
  _name: "animate",
  _v: 1,
  methods: {
    $cancelLastandAnimate: function(newO) {
      var i, tmp;
      tmp = this.$animations;
      if ((i = tmp.length) > 0) {
        newO = this.$cancelAnimation(tmp[i - 1], newO);
      }
      return this.$animate(newO);
    },
    $cancelAnimation: function(o, newO) {
      if (newO == null) {
        newO = {};
      }
      if ((o != null ? o.stop : void 0) != null) {
        return o.stop(newO);
      } else {
        return newO;
      }
    },
    $animate: function(o) {
      var cb, key, ref, ref1, s, tmp, transform, val;
      if (o.done != null) {
        o.done = o.done.bind(this);
      }
      if (o.el == null) {
        o.el = this;
      }
      if (o.animate === false) {
        transform = [];
        s = o.el.style;
        if (o.init) {
          ref = o.init;
          for (key in ref) {
            val = ref[key];
            s[key] = val;
          }
        }
        processStyle(s, o.style, 1, o.preserve);
        return typeof o.done === "function" ? o.done() : void 0;
      }
      if (o.style) {
        cb = step(o);
        if (o.duration == null) {
          o.duration = 300;
        }
        if (o.easing == null) {
          o.easing = this.$ease("in", "linear");
        }
        o.next = requestAnimationFrame.bind(null, cb);
        if (o._percent && (o._preserve != null)) {
          o.preserve = o._preserve;
        }
        if (o._style != null) {
          ref1 = o._style;
          for (key in ref1) {
            val = ref1[key];
            tmp = val.slice(0).reverse();
            if (tmp.length === 3) {
              tmp.push(tmp.shift());
            }
            o.style[key] = tmp;
          }
        }
        o.stop = (function(_this) {
          return function(obj) {
            var percent;
            if (!o.stopped) {
              o.stopped = true;
              _this.$animations.splice(_this.$animations.indexOf(o), 1);
              o.el.__ceriAnimation = null;
              if (obj != null) {
                if (obj.reset) {
                  processPreserve(o.el.style, o.preserve);
                } else {
                  percent = Math.min(1, (performance.now() - o.start) / o.duration);
                  obj._preserve = o.preserve;
                  obj._percent = 1 - percent;
                  obj._value = o.easing(percent);
                  obj._style = o.style;
                }
              }
            }
            return obj;
          };
        })(this);
        o.toEnd = function() {
          if (!o.stopped) {
            return o.start = -1e9;
          }
        };
        if (o.delay) {
          setTimeout(o.next, o.delay);
        } else {
          cb(performance.now());
        }
        this.$animations.push(o);
      }
      return o;
    },
    $ease: function(type, name, param) {
      var fn;
      fn = easing[name](param);
      switch (type) {
        case "in":
          return fn;
        case "inOut":
          return function(percent) {
            if (percent < 0.5) {
              return 0.5 * fn(percent * 2);
            } else {
              return 0.5 + (1 - fn(1 - (percent - 0.5) * 2));
            }
          };
        case "out":
          return function(percent) {
            return 1 - fn(1 - percent);
          };
      }
    }
  },
  data: function() {
    return {
      $animations: []
    };
  },
  destroy: function() {
    var ani, j, len, ref, results;
    ref = this.$animations;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      ani = ref[j];
      results.push(ani.stop());
    }
    return results;
  }
};

;
