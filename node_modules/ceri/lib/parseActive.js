var isString, noop, ref;

ref = require("./_helpers"), noop = ref.noop, isString = ref.isString;

module.exports = {
  _name: "parseActive",
  _prio: 10000,
  _v: 1,
  mixins: [require("./computed")],
  methods: {
    $parseActive: function(o) {
      var activate, activateWrapper, deactivate, shouldActivate;
      shouldActivate = false;
      deactivate = noop;
      activate = (function(_this) {
        return function() {
          var _deactivate;
          if (!shouldActivate) {
            return;
          }
          deactivate();
          _deactivate = o.activate.call(_this);
          o.wasActivated = true;
          deactivate = function() {
            var i;
            _deactivate.call(_this);
            if (o.destroy) {
              i = _this.__activeToDestroy.indexOf(_deactivate);
              if (i > -1) {
                _this.__activeToDestroy.splice(i, 1);
              }
            }
            return _deactivate = noop;
          };
          if (o.destroy) {
            _this.__activeToDestroy.push(deactivate);
          }
          return deactivate;
        };
      })(this);
      activateWrapper = (function(_this) {
        return function() {
          shouldActivate = true;
          if (o.delay) {
            return _this.$nextTick(activate);
          } else {
            return activate();
          }
        };
      })(this);
      if (o.active) {
        return this.$computed.orWatch(o.active, function(val, oldVal) {
          if (val !== oldVal) {
            if (val) {
              return activateWrapper();
            } else {
              shouldActivate = false;
              return deactivate();
            }
          }
        });
      } else {
        return activateWrapper();
      }
    }
  },
  connectedCallback: function() {
    if (this._isFirstConnect) {
      return this.__activeToDestroy = [];
    }
  },
  destroy: function() {
    var cb, j, len, ref1, results;
    ref1 = this.__activeToDestroy;
    results = [];
    for (j = 0, len = ref1.length; j < len; j++) {
      cb = ref1[j];
      results.push(cb());
    }
    return results;
  }
};
